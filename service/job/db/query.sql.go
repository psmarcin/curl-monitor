// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createJob = `-- name: CreateJob :one
insert into job (uuid, name, command, created_at, updated_at) values ($1, $2, $3, $4, $5) returning uuid, name, command, created_at, updated_at
`

type CreateJobParams struct {
	Uuid      uuid.UUID `json:"uuid"`
	Name      string    `json:"name"`
	Command   string    `json:"command"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.queryRow(ctx, q.createJobStmt, createJob,
		arg.Uuid,
		arg.Name,
		arg.Command,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Job
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getJob = `-- name: GetJob :one
select uuid, name, command, created_at, updated_at from job where uuid = $1 limit 1
`

func (q *Queries) GetJob(ctx context.Context, uuid uuid.UUID) (Job, error) {
	row := q.queryRow(ctx, q.getJobStmt, getJob, uuid)
	var i Job
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listJob = `-- name: ListJob :many
select uuid, name, command, created_at, updated_at from job where created_at > $1 order by created_at limit $2
`

type ListJobParams struct {
	CreatedAt time.Time `json:"createdAt"`
	Limit     int32     `json:"limit"`
}

func (q *Queries) ListJob(ctx context.Context, arg ListJobParams) ([]Job, error) {
	rows, err := q.query(ctx, q.listJobStmt, listJob, arg.CreatedAt, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.Command,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateJob = `-- name: UpdateJob :one
update job
    set name = $1, command = $2, updated_at = $3
where uuid = $4
returning uuid, name, command, created_at, updated_at
`

type UpdateJobParams struct {
	Name      string    `json:"name"`
	Command   string    `json:"command"`
	UpdatedAt time.Time `json:"updatedAt"`
	Uuid      uuid.UUID `json:"uuid"`
}

func (q *Queries) UpdateJob(ctx context.Context, arg UpdateJobParams) (Job, error) {
	row := q.queryRow(ctx, q.updateJobStmt, updateJob,
		arg.Name,
		arg.Command,
		arg.UpdatedAt,
		arg.Uuid,
	)
	var i Job
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Command,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
