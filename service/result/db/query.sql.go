// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createResult = `-- name: CreateResult :one
insert into result (uuid, job_uuid, output, type, created_at, updated_at)
values ($1, $2, $3, $4, $5, $6)
returning uuid, job_uuid, output, type, created_at, updated_at
`

type CreateResultParams struct {
	Uuid      uuid.UUID `json:"uuid"`
	JobUuid   uuid.UUID `json:"jobUuid"`
	Output    string    `json:"output"`
	Type      Output    `json:"type"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (Result, error) {
	row := q.queryRow(ctx, q.createResultStmt, createResult,
		arg.Uuid,
		arg.JobUuid,
		arg.Output,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Result
	err := row.Scan(
		&i.Uuid,
		&i.JobUuid,
		&i.Output,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResult = `-- name: GetResult :one
select uuid, job_uuid, output, type, created_at, updated_at
from result
where uuid = $1
limit 1
`

func (q *Queries) GetResult(ctx context.Context, uuid uuid.UUID) (Result, error) {
	row := q.queryRow(ctx, q.getResultStmt, getResult, uuid)
	var i Result
	err := row.Scan(
		&i.Uuid,
		&i.JobUuid,
		&i.Output,
		&i.Type,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listResult = `-- name: ListResult :many
select uuid, job_uuid, output, type, created_at, updated_at
from result
where job_uuid = $1
  and created_at > $2
order by created_at
limit $2
`

type ListResultParams struct {
	JobUuid uuid.UUID `json:"jobUuid"`
	Limit   int32     `json:"limit"`
}

func (q *Queries) ListResult(ctx context.Context, arg ListResultParams) ([]Result, error) {
	rows, err := q.query(ctx, q.listResultStmt, listResult, arg.JobUuid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.Uuid,
			&i.JobUuid,
			&i.Output,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
